variables:
 - group: ContainerRegistryVariables
 - group: VstsToolsBuildAgent
 - name: AgentImageName
   value: vststools-build-agent:20190917.5

resources:
  repositories:
  - repository: self

trigger:
  paths:
    exclude: 
    - Resources/

jobs:

- job: StartAgent
  displayName: 'Deploy and start agent'
  pool: 'Hosted Windows 2019 with VS2019'

  steps:
  # Check if ACI deployed and version of image in use, set condition variable for ACI deployment step

  # (Re)deploy ACI if not deployed / later image available
  - task: TotalALM.totalalm-tokenization.tokenization-build-task.Tokenization@2
    displayName: 'Tokenization: Transform file parameters.json'
    inputs:
      SourcePath: ./Resources/ArmTemplates/BuildAgent/
      TargetFileNames: parameters.json
  - task: AzureResourceGroupDeployment@2
    displayName: 'Deploy Container Instance Group'
    inputs:
      azureSubscription: $(AzureSubscription)
      resourceGroupName: $(ResourceGroupName)
      templateLocation: 'Linked artifact'
      csmFile: ./Resources/ArmTemplates/BuildAgent/template.json
      csmParametersFile: ./Resources/ArmTemplates/BuildAgent/parameters.json
      action: 'Create Or Update Resource Group'
      location: 'West Europe'
      overrideParameters: '-appContainerRegistryImage "$(ContainerRegistryAdminUser).azurecr.io/$(AgentImageName)" -containerRegistryServer $(ContainerRegistryAdminUser).azurecr.io -containerRegistryUsername $(ContainerRegistryAdminUser) -containerRegistryPassword $(ContainerRegistryPassword)'
  - task: DeleteFiles@1
    displayName: 'Delete parameters.json from $(System.DefaultWorkingDirectory)/_SkillsFundingAgency_dss-devops/Applications/NCS.DSS.AnonymiseBackup/Resources/ArmTemplates'
    inputs:
      SourceFolder: ./Resources/ArmTemplates/BuildAgent/
      Contents: parameters.json
    condition: always()      

  # Start ACI if image not changed

- job: Test
  dependsOn: StartAgent
  displayName: Test
  pool: 'Hosted Ubuntu 1604'

  steps:
  # Run PowerShell tests and publish results
  - task: PowerShell@2
    name: InvokeTests
    displayName: 'Invoke-Tests'
    inputs: 
      targetType: 'filePath'
      filePath: $(System.DefaultWorkingDirectory)/Tests/Invoke-Tests.ps1
      arguments: -CodeCoveragePath $(System.DefaultWorkingDirectory)\Scripts\*.ps1
    continueOnError: true
  - task: PublishTestResults@2
    displayName: 'Publish Test Results'
    inputs:
      testResultsFormat: NUnit
  - task: PublishCodeCoverageResults@1
    displayName: 'Publish code coverage'
    inputs:
      summaryFileLocation: '**/CODECOVERAGE-*.xml'
  - task: PowerShell@2
    name: OutputTests
    displayName: 'Out-TestResults'
    inputs: 
      targetType: 'filePath'
      filePath: $(System.DefaultWorkingDirectory)/Tests/Out-TestResults.ps1
      arguments: '-CoveragePercent 10'